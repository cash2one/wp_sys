
使用Tornado进行长轮询

Tornado异步架构的另一个优势是它能够轻松处理HTTP长轮询

部署提供实时更新的Web应用对于Web程序员而言是一项长期的挑战。
更新用户状态、发送新消息提醒、或者任何一个需要在初始文档完成加载后由服务器向浏览器发送消息方法的全局活动。

一个早期的方法是浏览器以一个固定的时间间隔向服务器轮询新请求。
这项技术带来了新的挑战：轮询频率必须足够快以便通知是最新的，但又不能太频繁，当成百上千的客户端持续不断的打开新的连接会使HTTP请求面临严重的扩展性挑战。
频繁的轮询使得Web服务器遭受"凌迟"之苦。

所谓的"服务器推送"技术允许Web应用实时发布更新 - HTTP连接被称为长轮询或Comet请求


长轮询意味着浏览器只需启动一个HTTP请求，
其连接的服务器会有意保持开启。
浏览器只需要等待更新可用时服务器"推送"响应。
当服务器发送响应并关闭连接后，（或者浏览器端客户请求超时），客户端只需打开一个新的连接并等待下一个更新。

长轮询的好处¶

HTTP长轮询的主要吸引力在于其极大地减少了Web服务器的负载。
相对于客户端制造大量的短而频繁的请求（以及每次处理HTTP头部产生的开销），
服务器端只有当其接收一个初始请求和再次发送响应时处理连接。大部分时间没有新的数据，连接也不会消耗任何处理器资源。

浏览器兼容性是另一个巨大的好处。任何支持AJAX请求的浏览器都可以执行推送请求。不需要任何浏览器插件或其他附加组件。
对比其他服务器端推送技术，HTTP长轮询最终成为了被广泛使用的少数几个可行方案之一。

例如: 消息推送/ 状态更新/ 协同编辑/ 聊天消息/ 购物车


===================

长轮询的缺陷

当使用长轮询开发应用时，记住对于浏览器请求超时间隔无法控制是非常重要的。由浏览器决定在任何中断情况下重新开启HTTP连接。另一个潜在的问题是许多浏览器限制了对于打开的特定主机的并发请求数量。当有一个连接保持空闲时，剩下的用来下载网站内容的请求数量就会有限制。









# - * - coding:utf-8 - * -from __future__ import divisionimport osimport ftplibfrom ftplib import FTPclass MyFtp():	def __init__(self,host,user,password,port=21):		self.host = host		self.user = user		self.password = password		self.port = port		self.ftp=FTP(host)	def connent(self):		self.ftp.login(host=self.host, user=self.user, password=self.password)	def handle(self):		pass	def upload(self,full_path_file_names):		for full_path_file_name in full_path_file_names:			file_name = os.path.basename(full_path_file_name)class MyFile():	def __init__(self,fileName=''):		self.Name = fileName		self.sizeWritten = 0		self.total_size = 0		self.pull_path = ''	def close(self):		passBASE_FILE_DIR = '/home/l/test1/'ftp_host = 'ftp.uploadable.ch'ftp_user = 'lxl001'ftp_password = 'f19174de'file_name_list = os.listdir(BASE_FILE_DIR)full_path_file_name_list = []myFtp = MyFtp(host=ftp_host,user=ftp_user,password=ftp_password)myFtp.connent()sizeWritten = 0blocksize = 1024file_name = '123.pdf'file_total_size = os.path.getsize(file_name)print 'file_total_size: %s' % file_total_sizedef handle(block):	global sizeWritten	sizeWritten += blocksize	result = sizeWritten / file_total_size * 100	print "%0.3f percent complete" % resultwith open(file_name,'rb') as f:	try:		myFtp.ftp.storbinary('STOR ' + file_name,				   f,				   blocksize,				   handle)	except ftplib.error_perm :		print "上传失败"